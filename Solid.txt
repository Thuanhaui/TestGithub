
SOLID là một Nguyên tắc thiết kế hướng đối tượng giúp cho chương trình phần mềm dễ đọc,
dễ hiểu, dễ bảo trì và mở rộng.

==Nguyên tắc #1:  Single-responsibility Principle
	Nó đơn giản là một class chỉ nên thực hiện một công việc duy nhất 
		chứ không phải nhiều công việc trong cùng một class.

==Nguyên tắc #2: Open-closed Principle
	Các class có thể được mở rộng thoải mái, nhưng không cho phép sửa đổi bên trong class đó.
	Tức là: hưng điều này có nghĩa là các class nên được mở rộng để có thể thay đổi chức năng,
		 thay vì được sửa đổi bên trong nó.
==Nguyên tắc #3: Liskov substitution principle

==Nguyên tắc #4: Interface segregation principle
	Thay vì dùng 1 interface lớn, ta nên tách thành nhiều interface nhỏ, với nhiều mục đích cụ thể
	có nghĩa, các class không nên bị buộc phải thực hiện các interface mà chúng không sử dụng\
	Hãy tưởng tượng chúng ta có 1 interface lớn, khoảng 100 methods.

	 Việc implements sẽ khá cực khổ, ngoài ra còn có thể dư thừa vì 1 class không cần dùng hết 100 method. 
	Khi tách interface ra thành nhiều interface nhỏ,
	gồm các method liên quan tới nhau, việc implement và quản lý sẽ dễ hơn.
	=>Exam: Class thực hiện interface employee có các method mà chúng sẽ k thực hiện.
		interface Employee {
 		 public function generatereport()
		 public function clockin()
 		 public function clockout()
  		 public function customerservice()
  		 public function getPaid()
		}

==Nguyên tắc #5: Dependency Inversion principle
		1. Các module cấp cao không nên phụ thuộc vào các modules cấp thấp. 
 		  Cả 2 nên phụ thuộc vào abstraction.
		2. Interface (abstraction) không nên phụ thuộc vào chi tiết, mà ngược lại.
		( Các class giao tiếp với nhau thông qua interface, 
		không phải thông qua implementation.)